import os
import logging
import random
from dotenv import load_dotenv
import telebot
from telebot import types
import psycopg2
import redis

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(os.getenv('TELEGRAM_TOKEN'))

# ID —á–∞—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
SUPPORT_CHAT_ID = int(os.getenv('SUPPORT_CHAT_ID', 1132159425))

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}
user_menu_messages = {}
user_course_positions = {
    'regular': {},
    'recommended': {}
}
# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–ø—Ä–æ—Å–∞ –ø–æ–¥–±–æ—Ä–∞ –∫—É—Ä—Å–æ–≤
user_survey_state = {}
# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
user_feedback_state = {}
# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ü–µ–Ω–∫–∏
user_rating_state = {}
# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞ –ø–µ—Ä–µ–¥ –æ—Ü–µ–Ω–∫–æ–π
user_selected_course_for_rating = {}
# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –æ—Ü–µ–Ω–∫–æ–π
user_selected_teacher_for_rating = {}

# –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —á—Ç–æ —Å–µ–π—á–∞—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –§–ò–û
user_typing_teacher_name = {}

# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–∏—à—É—Ç –≤–æ–ø—Ä–æ—Å
users_waiting_for_question = {}

# –î–ª—è —Å–≤—è–∑–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
pending_questions = {}

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø—Ä–æ—Å–∞
# –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø—Ä–æ—Å–∞
survey_questions = [
    {
        'question': 'üéì –ö–µ–º –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å?',
        'options': ['–°—Ç—É–¥–µ–Ω—Ç', '–ê–£–ü', '–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ', '–ü–ü–°'],
        'key': 'role'
    },
    {
        'question': 'üìö –ö–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',
        'options': ['–§–∏–Ω–∞–Ω—Å—ã', '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '–ü–µ–¥–∞–≥–æ–≥–∏–∫–∞'],
        'key': 'direction'
    },
    {
        'question': '‚è± –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ —É –≤–∞—Å –µ—Å—Ç—å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ?',
        'options': ['1-4 –Ω–µ–¥–µ–ª–∏', '5-8 –Ω–µ–¥–µ–ª—å', '–ë–æ–ª–µ–µ 8 –Ω–µ–¥–µ–ª—å'],
        'key': 'time'
    },
    {
        'question': 'üí∞ –ö–∞–∫–æ–π –±—é–¥–∂–µ—Ç –≤—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ?',
        'options': ['–î–æ 10 000 —Ä—É–±.', '10-20 000 —Ä—É–±.', '–ë–æ–ª–µ–µ 20 000 —Ä—É–±.'],
        'key': 'budget'
    }
]

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö FAQ (–≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã)
# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö FAQ (–≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã)
faq_data = {
    "–û–ø–ª–∞—Ç–∞": [
        {"question": "–ö–∞–∫–∏–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã?",
         "answer": "–ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º –æ–ø–ª–∞—Ç—É –±–∞–Ω–∫–æ–≤—Å–∫–∏–º–∏ –∫–∞—Ä—Ç–∞–º–∏ (Visa, Mastercard, –ú–ò–†), –∞ —Ç–∞–∫–∂–µ —á–µ—Ä–µ–∑ PayPal."},
        {"question": "–ï—Å—Ç—å –ª–∏ —Ä–∞—Å—Å—Ä–æ—á–∫–∞?",
         "answer": "–î–∞, –º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—Ä–æ—á–∫—É –Ω–∞ 3 –º–µ—Å—è—Ü–∞ –¥–ª—è –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é –æ—Ç 20 000 —Ä—É–±."},
        {"question": "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —á–µ–∫?",
         "answer": "–ß–µ–∫ –ø—Ä–∏—Ö–æ–¥–∏—Ç –Ω–∞ –≤–∞—à—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã. –ï—Å–ª–∏ –ø–∏—Å—å–º–∞ –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É '–°–ø–∞–º'."}
    ],
    "–ó–∞–ø–∏—Å—å –Ω–∞ –∫—É—Ä—Å": [
        {"question": "–ö–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å?",
         "answer": "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è'. –í–∞–º –ø—Ä–∏–¥–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–∞ –ø–æ—á—Ç—É."},
        {"question": "–ù—É–∂–Ω—ã –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏?",
         "answer": "–î–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –∫—É—Ä—Å–æ–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Å–ø–æ—Ä—Ç–∞. –î–ª—è –ø—Ä–æ–≥—Ä–∞–º–º —Å –≤—ã–¥–∞—á–µ–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥–∏–ø–ª–æ–º."},
        {"question": "–ú–æ–∂–Ω–æ –ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É?",
         "answer": "–î–∞, –∑–≤–æ–Ω–∏—Ç–µ –ø–æ –Ω–æ–º–µ—Ä—É +7 (XXX) XXX-XX-XX —Å 9:00 –¥–æ 18:00."}
    ],
    "–°—Ä–æ–∫–∏": [
        {"question": "–ö–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∫—É—Ä—Å?",
         "answer": "–ë–ª–∏–∂–∞–π—à–∏–π —Å—Ç–∞—Ä—Ç - 15 —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞. –¢–æ—á–Ω–∞—è –¥–∞—Ç–∞ —É–∫–∞–∑–∞–Ω–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫—É—Ä—Å–∞."},
        {"question": "–ú–æ–∂–Ω–æ –ª–∏ –ø—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø?",
         "answer": "–î–∞, –¥–æ—Å—Ç—É–ø –º–æ–∂–Ω–æ –ø—Ä–æ–¥–ª–∏—Ç—å –∑–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–ª–∞—Ç—É (10% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫—É—Ä—Å–∞ –∑–∞ –º–µ—Å—è—Ü)."},
        {"question": "–°–∫–æ–ª—å–∫–æ –¥–ª–∏—Ç—Å—è –∫—É—Ä—Å?",
         "answer": "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É–∫–∞–∑–∞–Ω–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–∞–∂–¥–æ–≥–æ –∫—É—Ä—Å–∞. –û–±—ã—á–Ω–æ –æ—Ç 4 –¥–æ 12 –Ω–µ–¥–µ–ª—å."}
    ],
    "–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞": [
        {"question": "–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç",
         "answer": "–û—á–∏—Å—Ç–∏—Ç–µ –∫–µ—à –±—Ä–∞—É–∑–µ—Ä–∞ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–π—Ç–∏ —Å –¥—Ä—É–≥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞ support@example.com."},
        {"question": "–ù–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –ø–∏—Å—å–º–∞",
         "answer": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É '–°–ø–∞–º'. –î–æ–±–∞–≤—å—Ç–µ –Ω–∞—à email –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Ä–µ—à–µ–Ω–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."},
        {"question": "–ö–∞–∫ —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å?",
         "answer": "–ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?' –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º."}
    ]
}

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
redis_conn = redis.Redis(
    host=os.getenv('REDIS_HOST', 'redis'),
    port=6379,
    db=0,
    decode_responses=True
)

def get_db_connection():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å PostgreSQL"""
    return psycopg2.connect(
        dbname=os.getenv('DB_NAME'),
        user=os.getenv('DB_USER'),
        password=os.getenv('DB_PASSWORD'),
        host=os.getenv('DB_HOST')
    )

def save_user(telegram_id, username, full_name, position=None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        with get_db_connection() as conn:
            with conn.cursor() as cur:
                cur.execute(
                    """INSERT INTO users (telegram_id, username, full_name, position)
                    VALUES (%s, %s, %s, %s)
                    ON CONFLICT (telegram_id) DO UPDATE
                    SET username = EXCLUDED.username,
                        full_name = EXCLUDED.full_name,
                        position = COALESCE(users.position, EXCLUDED.position),
                        last_activity = CURRENT_TIMESTAMP""",
                    (telegram_id, username, full_name, position)
                )
                conn.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

def get_user_position(telegram_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        with get_db_connection() as conn:
            with conn.cursor() as cur:
                cur.execute(
                    "SELECT position FROM users WHERE telegram_id = %s",
                    (telegram_id,)
                )
                result = cur.fetchone()
                return result[0] if result else None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏: {e}")
        return None

def get_courses_by_category(category_name):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        with get_db_connection() as conn:
            with conn.cursor() as cur:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                if category_name in ['finance', 'management', 'pedagogy']:
                    cur.execute("""
                        SELECT title, description, duration, price, url, access, 
                               direction as category, direction
                        FROM courses 
                        WHERE direction = %s
                        ORDER BY title
                    """, (category_name,))
                elif category_name in ['pps', 'aup', 'guide', 'students']:
                    role_map = {
                        'pps': '–ü–ü–°',
                        'aup': '–ê–£–ü',
                        'guide': '–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ',
                        'students': '–°—Ç—É–¥–µ–Ω—Ç'
                    }
                    cur.execute("""
                        SELECT title, description, duration, price, url, access, 
                               role as category, direction
                        FROM courses 
                        WHERE role = %s
                        ORDER BY title
                    """, (role_map[category_name],))
                elif category_name in ['open', 'limited']:
                    cur.execute("""
                        SELECT title, description, duration, price, url, access, 
                               access as category, direction
                        FROM courses 
                        WHERE access = %s
                        ORDER BY title
                    """, (category_name,))
                else:
                    return []
                
                courses = cur.fetchall()
                return [{
                    'title': c[0],
                    'description': c[1],
                    'duration': c[2],
                    'price': c[3],
                    'url': c[4],
                    'access': c[5],
                    'category': c[6],
                    'direction': c[7],
                    'week': f"{c[2]} –Ω–µ–¥–µ–ª—å" if c[2] else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                } for c in courses]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤: {e}")
        return []
         
def get_all_courses():
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∫—É—Ä—Å—ã"""
    try:
        with get_db_connection() as conn:
            with conn.cursor() as cur:
                cur.execute(
                    """SELECT c.title, c.description, c.duration, c.price, c.url, cc.name as category
                    FROM courses c
                    JOIN course_categories cc ON c.category_id = cc.category_id
                    ORDER BY c.title"""
                )
                return cur.fetchall()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤: {e}")
        return []

def save_rating(user_id, rating_type, target, rating):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ü–µ–Ω–∫—É –≤ –±–∞–∑—É"""
    try:
        with get_db_connection() as conn:
            with conn.cursor() as cur:
                cur.execute(
                    """INSERT INTO ratings (user_id, rating_type, target, rating)
                    VALUES (%s, %s, %s, %s)""",
                    (user_id, rating_type, target, rating)
                )
                conn.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏: {e}")

def filter_courses_by_direction(direction):
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç –∫—É—Ä—Å—ã –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é"""
    try:
        with get_db_connection() as conn:
            with conn.cursor() as cur:
                cur.execute(
                    """SELECT c.title, c.description, c.duration, c.price, c.url, cc.name as category
                    FROM courses c
                    JOIN course_categories cc ON c.category_id = cc.category_id
                    WHERE cc.name = %s
                    ORDER BY c.title""",
                    (direction.lower(),)
                )
                courses = cur.fetchall()
                return [{
                    'title': c[0],
                    'description': c[1],
                    'duration': c[2],
                    'price': c[3],
                    'url': c[4],
                    'direction': direction.lower(),
                    'week': f"{c[2]} –Ω–µ–¥–µ–ª—å" if c[2] else "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                    'access': 'open'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ –≤ –ë–î
                } for c in courses]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫—É—Ä—Å–æ–≤ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é: {e}")
        return []

def filter_courses_by_access(access):
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç –∫—É—Ä—Å—ã –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
    try:
        # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤ –ë–î
        all_courses = get_all_courses()
        return [{
            'title': c[0],
            'description': c[1],
            'duration': c[2],
            'price': c[3],
            'url': c[4],
            'access': 'open' if random.random() > 0.5 else 'limited',  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
            'week': f"{c[2]} –Ω–µ–¥–µ–ª—å" if c[2] else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        } for c in all_courses if access == 'open' or random.random() > 0.7]  # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫—É—Ä—Å–æ–≤ –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏: {e}")
        return []
def show_main_menu(user_id, edit_message_id=None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ —Å—Ç–æ–ª–±–∏–∫"""
    keyboard = types.InlineKeyboardMarkup()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –ø–æ –æ–¥–Ω–æ–π –≤ —Å—Ç–æ–ª–±–∏–∫
    keyboard.add(types.InlineKeyboardButton('–ö–∞—Ç–∞–ª–æ–≥ –∫—É—Ä—Å–æ–≤', callback_data='catalog'))
    keyboard.add(types.InlineKeyboardButton('–ß–∞—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã', callback_data='questions'))
    keyboard.add(types.InlineKeyboardButton('–ü–æ–¥–æ–±—Ä–∞—Ç—å –∫—É—Ä—Å', callback_data='courses'))
    keyboard.add(types.InlineKeyboardButton('–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å', callback_data='feedback'))
    
    try:
        if edit_message_id:
            msg = bot.edit_message_text(
                chat_id=user_id,
                message_id=edit_message_id,
                text='–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –í–∞–º –Ω—É–∂–Ω–æ:',
                reply_markup=keyboard
            )
        else:
            msg = bot.send_message(
                user_id,
                text='–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –í–∞–º –Ω—É–∂–Ω–æ:',
                reply_markup=keyboard
            )
        user_menu_messages[user_id] = msg.message_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
        
def show_direction_menu(user_id, edit_message_id=None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–≤ —Å—Ç–æ–ª–±–∏–∫)"""
    keyboard = types.InlineKeyboardMarkup()
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π (–∫–∞–∂–¥–∞—è –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä—è–¥)
    keyboard.add(types.InlineKeyboardButton('–§–∏–Ω–∞–Ω—Å—ã', callback_data='finance'))
    keyboard.add(types.InlineKeyboardButton('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', callback_data='management'))
    keyboard.add(types.InlineKeyboardButton('–ü–µ–¥–∞–≥–æ–≥–∏–∫–∞', callback_data='pedagogy'))
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard.add(types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='catalog'))
    keyboard.add(types.InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu'))
    
    send_or_edit_message(
        user_id=user_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è:",
        reply_markup=keyboard,
        edit_message_id=edit_message_id
    )

def show_post_menu(user_id, edit_message_id=None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ (–≤ —Å—Ç–æ–ª–±–∏–∫)"""
    keyboard = types.InlineKeyboardMarkup()
    
    # –ö–Ω–æ–ø–∫–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π (–∫–∞–∂–¥–∞—è –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä—è–¥)
    keyboard.add(types.InlineKeyboardButton('–ü–ü–°', callback_data='pps'))
    keyboard.add(types.InlineKeyboardButton('–ê–£–ü', callback_data='aup'))
    keyboard.add(types.InlineKeyboardButton('–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ', callback_data='guide'))
    keyboard.add(types.InlineKeyboardButton('–°—Ç—É–¥–µ–Ω—Ç—ã', callback_data='students'))
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard.add(types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='catalog'))
    keyboard.add(types.InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu'))
    
    send_or_edit_message(
        user_id=user_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:",
        reply_markup=keyboard,
        edit_message_id=edit_message_id
    )

def send_or_edit_message(user_id, text, reply_markup, edit_message_id=None):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        if edit_message_id:
            msg = bot.edit_message_text(
                chat_id=user_id,
                message_id=edit_message_id,
                text=text,
                reply_markup=reply_markup
            )
        else:
            msg = bot.send_message(
                user_id,
                text=text,
                reply_markup=reply_markup
            )
        user_menu_messages[user_id] = msg.message_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
def show_course(user_id, course_type, course_index=0, edit_message_id=None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—É—Ä—Å —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ª–∏—Å—Ç–∞–Ω–∏—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –ø–æ —Ç–∏–ø—É (–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ/–¥–æ–ª–∂–Ω–æ—Å—Ç—å/–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å)
        courses = get_courses_by_category(course_type)
        
        if not courses:
            bot.send_message(user_id, "üòï –ö—É—Ä—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å (—Ü–∏–∫–ª–∏—á–µ—Å–∫–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è)
        course_index = course_index % len(courses)
        course = courses[course_index]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if 'regular' not in user_course_positions:
            user_course_positions['regular'] = {}
        user_course_positions['regular'][user_id] = {
            'courses': courses,
            'position': course_index,
            'filter_value': course_type
        }

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = f"""<b>{course['title']}</b>

{course['description']}

üìå –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {course.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {course.get('week', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {course['price']:,} —Ä—É–±.
üîê –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: {'–û—Ç–∫—Ä—ã—Ç—ã–π' if course['access'] == 'open' else '–ó–∞–∫—Ä—ã—Ç—ã–π'}"""

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = types.InlineKeyboardMarkup()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫—É—Ä—Å–æ–≤ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ
        if len(courses) > 1:
            keyboard.row(
                types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f'course_prev_{course_type}_{course_index}'),
                types.InlineKeyboardButton(f"{course_index + 1}/{len(courses)}", callback_data='none'),
                types.InlineKeyboardButton("‚û°Ô∏è", callback_data=f'course_next_{course_type}_{course_index}')
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç –∫—É—Ä—Å–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å URL)
        if course.get('url'):
            keyboard.add(types.InlineKeyboardButton("üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –∫—É—Ä—Å–∞", url=course['url']))

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        back_action = {
            'finance': 'direction',
            'management': 'direction',
            'pedagogy': 'direction',
            'pps': 'post',
            'aup': 'post',
            'guide': 'post',
            'students': 'post',
            'open': 'availability',
            'limited': 'availability'
        }.get(course_type, 'catalog')

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard.row(
            types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=back_action),
            types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if edit_message_id:
            bot.edit_message_text(
                chat_id=user_id,
                message_id=edit_message_id,
                text=message_text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
        else:
            msg = bot.send_message(
                user_id,
                text=message_text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            user_menu_messages[user_id] = msg.message_id

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫—É—Ä—Å–∞: {e}")
        bot.send_message(user_id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—É—Ä—Å–∞")

def show_availability_menu(user_id, edit_message_id=None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ (–≤ —Å—Ç–æ–ª–±–∏–∫)"""
    keyboard = types.InlineKeyboardMarkup()
    
    # –ö–Ω–æ–ø–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    keyboard.add(types.InlineKeyboardButton('–û—Ç–∫—Ä—ã—Ç—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã', callback_data='open'))
    keyboard.add(types.InlineKeyboardButton('–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã', callback_data='limited'))
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard.add(types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='catalog'))
    keyboard.add(types.InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu'))
    
    send_or_edit_message(
        user_id=user_id,
        text="–ü—Ä–æ–≥—Ä–∞–º–º—ã –∫–∞–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?",
        reply_markup=keyboard,
        edit_message_id=edit_message_id
    )

def show_faq_topics(user_id, edit_message_id=None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–º—ã FAQ"""
    keyboard = types.InlineKeyboardMarkup()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã FAQ
    for topic in faq_data.keys():
        keyboard.add(types.InlineKeyboardButton(text=topic, callback_data=f'faq_topic_{topic}'))
    
    keyboard.add(types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu'))

    try:
        if edit_message_id:
            bot.edit_message_text(
                chat_id=user_id,
                message_id=edit_message_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –≤–æ–ø—Ä–æ—Å–∞:",
                reply_markup=keyboard
            )
        else:
            msg = bot.send_message(
                user_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –≤–æ–ø—Ä–æ—Å–∞:",
                reply_markup=keyboard
            )
            user_menu_messages[user_id] = msg.message_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ç–µ–º FAQ: {e}")

def show_faq_questions(user_id, topic, edit_message_id=None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ"""
    if topic not in faq_data:
        bot.send_message(user_id, "‚ùå –¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    keyboard = types.InlineKeyboardMarkup()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤ —Ç–µ–º–µ
    for i, item in enumerate(faq_data[topic]):
        keyboard.add(types.InlineKeyboardButton(
            text=item["question"],
            callback_data=f'faq_item_{topic}_{i}'
        ))
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard.row(
        types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º", callback_data='questions'),
        types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')
    )

    try:
        if edit_message_id:
            bot.edit_message_text(
                chat_id=user_id,
                message_id=edit_message_id,
                text=f"–í–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–µ '{topic}':",
                reply_markup=keyboard
            )
        else:
            msg = bot.send_message(
                user_id,
                text=f"–í–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–µ '{topic}':",
                reply_markup=keyboard
            )
            user_menu_messages[user_id] = msg.message_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ FAQ: {e}")

def show_faq_answer(user_id, topic, question_index, edit_message_id=None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å"""
    try:
        question_data = faq_data[topic][question_index]
    except (KeyError, IndexError):
        bot.send_message(user_id, "‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row(
        types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å–∞–º", callback_data=f'faq_topic_{topic}'),
        types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')
    )

    answer_text = f"<b>–í–æ–ø—Ä–æ—Å:</b> {question_data['question']}\n\n<b>–û—Ç–≤–µ—Ç:</b> {question_data['answer']}"

    try:
        if edit_message_id:
            bot.edit_message_text(
                chat_id=user_id,
                message_id=edit_message_id,
                text=answer_text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
        else:
            msg = bot.send_message(
                user_id,
                text=answer_text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            user_menu_messages[user_id] = msg.message_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ FAQ: {e}")

def start_course_survey(user_id):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –∫—É—Ä—Å–∞"""
    user_survey_state[user_id] = {
        'current_question': 0,
        'answers': {},
        'message_id': None
    }
    ask_survey_question(user_id)

def ask_survey_question(user_id):
    """–ó–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –∏–∑ –æ–ø—Ä–æ—Å–∞"""
    state = user_survey_state.get(user_id)
    if not state or state['current_question'] >= len(survey_questions):
        return

    question_data = survey_questions[state['current_question']]
    keyboard = types.InlineKeyboardMarkup()

    for option in question_data['options']:
        clean_option = option.replace(' ', '_').replace(',', '')
        callback_data = f"survey_{state['current_question']}_{clean_option}"
        keyboard.add(types.InlineKeyboardButton(text=option, callback_data=callback_data))

    row_buttons = []
    if state['current_question'] > 0:
        row_buttons.append(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="survey_back"))
    row_buttons.append(types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="survey_main_menu"))
    keyboard.row(*row_buttons)

    try:
        if state['message_id']:
            msg = bot.edit_message_text(
                chat_id=user_id,
                message_id=state['message_id'],
                text=question_data['question'],
                reply_markup=keyboard
            )
        else:
            msg = bot.send_message(user_id, question_data['question'], reply_markup=keyboard)
            state['message_id'] = msg.message_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞: {e}")

def process_survey_answer(user_id, question_index, answer):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ–ø—Ä–æ—Å–∞"""
    state = user_survey_state.get(user_id)
    if not state:
        return

    question_data = survey_questions[question_index]
    state['answers'][question_data['key']] = answer
    state['current_question'] += 1

    if state['current_question'] < len(survey_questions):
        ask_survey_question(user_id)
    else:
        try:
            bot.delete_message(user_id, state['message_id'])
        except:
            pass

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫—É—Ä—Å–æ–≤
        filtered_courses = []

        # –§–∏–ª—å—Ç—Ä –ø–æ —Ä–æ–ª–∏
        role_map = {
            '–°—Ç—É–¥–µ–Ω—Ç': 'students',
            '–ê–£–ü': 'aup',
            '–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ': 'guide',
            '–ü–ü–°': 'pps'
        }
        role = role_map.get(state['answers'].get('role'))
        if role:
            role_courses = get_courses_by_category(role)
            filtered_courses.extend(role_courses)

        # –§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ)
        selected_direction = state['answers'].get('direction')
        if selected_direction:
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –∫–ª—é—á –∫—É—Ä—Å–∞
            direction_mapping = {
                '–§–∏–Ω–∞–Ω—Å—ã': 'finance',
                '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ': 'management',
                '–ü–µ–¥–∞–≥–æ–≥–∏–∫–∞': 'pedagogy'
            }
            target_direction = direction_mapping.get(selected_direction)
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–ª—é direction –≤ –∫—É—Ä—Å–∞—Ö
            filtered_courses = [c for c in filtered_courses if c.get('direction') == target_direction]

        # –§–∏–ª—å—Ç—Ä –ø–æ –±—é–¥–∂–µ—Ç—É
        budget_filter = {
            '–î–æ 10 000 —Ä—É–±.': lambda x: x <= 10000,
            '10-20 000 —Ä—É–±.': lambda x: 10000 < x <= 20000,
            '–ë–æ–ª–µ–µ 20 000 —Ä—É–±.': lambda x: x > 20000
        }
        budget_func = budget_filter.get(state['answers'].get('budget'), lambda x: True)
        filtered_courses = [c for c in filtered_courses if budget_func(c['price'])]

        # –§–∏–ª—å—Ç—Ä –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        duration_preference = state['answers'].get('time')
        duration_filter = {
            '1-4 –Ω–µ–¥–µ–ª–∏': lambda x: x <= 4,
            '5-8 –Ω–µ–¥–µ–ª—å': lambda x: 5 <= x <= 8,
            '–ë–æ–ª–µ–µ 8 –Ω–µ–¥–µ–ª—å': lambda x: x > 8
        }.get(duration_preference, lambda x: True)
        filtered_courses = [c for c in filtered_courses if duration_filter(c['duration'])]

        # –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        seen = set()
        unique_courses = []
        for c in filtered_courses:
            if c['title'] not in seen:
                seen.add(c['title'])
                unique_courses.append(c)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        user_course_positions['recommended'][user_id] = {
            'courses': unique_courses,
            'position': 0,
            'saved_answers': state['answers'].copy(),
            'saved_question': len(survey_questions) - 1
        }

        if unique_courses:
            show_recommended_course(user_id, course_index=0)
        else:
            bot.send_message(user_id, "üòï –ü–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫—É—Ä—Å–æ–≤")
            show_main_menu(user_id)

        del user_survey_state[user_id]

def show_recommended_course(user_id, course_index, edit_message_id=None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π –∫—É—Ä—Å"""
    if user_id not in user_course_positions['recommended']:
        return

    current_state = user_course_positions['recommended'][user_id]
    courses = current_state['courses']
    total_courses = len(courses)

    # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    course_index = course_index % total_courses
    current_state['position'] = course_index
    course = courses[course_index]

    keyboard = types.InlineKeyboardMarkup()

    if total_courses > 1:
        keyboard.row(
            types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data='recommended_prev'),
            types.InlineKeyboardButton(f"{course_index + 1}/{total_courses}", callback_data='none'),
            types.InlineKeyboardButton("‚û°Ô∏è", callback_data='recommended_next')
        )

    if course.get('url'):
        keyboard.add(types.InlineKeyboardButton("üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –∫—É—Ä—Å–∞", url=course['url']))

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–≤ —Å—Ç–æ–ª–±–∏–∫)
    keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –æ–ø—Ä–æ—Å—É", callback_data='recommended_back'))
    keyboard.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu'))

    message_text = f"""üéâ <b>–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π –∫—É—Ä—Å</b> üéâ

<b>{course['title']}</b>
{course['description']}

‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {course.get('week', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {course.get('price', 0):,} —Ä—É–±.
üîê –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: {'–û—Ç–∫—Ä—ã—Ç—ã–π' if course.get('access') == 'open' else '–ó–∞–∫—Ä—ã—Ç—ã–π'}"""

    try:
        if edit_message_id:
            msg = bot.edit_message_text(
                chat_id=user_id,
                message_id=edit_message_id,
                text=message_text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
        else:
            msg = bot.send_message(
                user_id,
                text=message_text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            current_state['message_id'] = msg.message_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫—É—Ä—Å–∞: {e}")

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = message.from_user
    save_user(user.id, user.username, f"{user.first_name} {user.last_name or ''}")
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ '–ü—Ä–∏–≤–µ—Ç' –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º")

@bot.callback_query_handler(func=lambda call: call.data.startswith('course_prev_'))
def handle_course_prev(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥' –≤ –ª–∏—Å—Ç–∞–Ω–∏–∏ –∫—É—Ä—Å–æ–≤"""
    try:
        parts = call.data.split('_')
        if len(parts) >= 4:
            course_type = parts[2]
            current_index = int(parts[3])
            show_course(call.from_user.id, course_type, current_index - 1, call.message.message_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ course_prev: {e}")
    finally:
        bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == 'catalog')
def handle_catalog(call):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∫–∞—Ç–∞–ª–æ–≥–∞ (–≤ —Å—Ç–æ–ª–±–∏–∫)"""
    keyboard = types.InlineKeyboardMarkup()
    
    # –ö–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–∫–∞–∂–¥–∞—è –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä—è–¥)
    keyboard.add(types.InlineKeyboardButton('–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è', callback_data='direction'))
    keyboard.add(types.InlineKeyboardButton('–î–æ–ª–∂–Ω–æ—Å—Ç—å', callback_data='post'))
    keyboard.add(types.InlineKeyboardButton('–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å', callback_data='availability'))
    
    # –ö–Ω–æ–ø–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    keyboard.add(types.InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu'))
    
    try:
        bot.edit_message_text(
            chat_id=call.from_user.id,
            message_id=call.message.message_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –∫—É—Ä—Å–æ–≤:",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
    finally:
        bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data in ['direction', 'post', 'availability'])
def handle_back_to_menus(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é"""
    if call.data == 'direction':
        show_direction_menu(call.from_user.id, call.message.message_id)
    elif call.data == 'post':
        show_post_menu(call.from_user.id, call.message.message_id)
    elif call.data == 'availability':
        show_availability_menu(call.from_user.id, call.message.message_id)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('course_next_'))
def handle_course_next(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–í–ø–µ—Ä–µ–¥' –≤ –ª–∏—Å—Ç–∞–Ω–∏–∏ –∫—É—Ä—Å–æ–≤"""
    try:
        parts = call.data.split('_')
        if len(parts) >= 4:
            course_type = parts[2]
            current_index = int(parts[3])
            show_course(call.from_user.id, course_type, current_index + 1, call.message.message_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ course_next: {e}")
    finally:
        bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('faq_topic_'))
def handle_faq_topic(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ–º—ã FAQ"""
    topic = call.data.split('_', 2)[2]  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É –∏–∑ callback_data
    show_faq_questions(call.from_user.id, topic, call.message.message_id)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('faq_item_'))
def handle_faq_item(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ FAQ"""
    parts = call.data.split('_')
    if len(parts) == 4:  # faq_item_{topic}_{index}
        topic = parts[2]
        question_index = int(parts[3])
        show_faq_answer(call.from_user.id, topic, question_index, call.message.message_id)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == "questions")
def handle_questions_callback(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ß–∞—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã'"""
    show_faq_topics(call.from_user.id, call.message.message_id)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == 'main_menu')
def handle_main_menu(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'"""
    try:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
        if call.from_user.id in user_survey_state:
            del user_survey_state[call.from_user.id]
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
        if call.from_user.id in user_course_positions['recommended']:
            del user_course_positions['recommended'][call.from_user.id]
        
        show_main_menu(call.from_user.id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
    finally:
        bot.answer_callback_query(call.id)

@bot.message_handler(func=lambda message: users_waiting_for_question.get(message.chat.id))
def handle_user_question(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    chat_id = message.chat.id
    user_id = message.from_user.id
    text = message.text

    users_waiting_for_question.pop(chat_id, None)

    sent = bot.send_message(
        SUPPORT_CHAT_ID,
        f"üì© –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username or '–ë–µ–∑ –Ω–∏–∫–∞'} :\n\n{text}\n\n"
        f"–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
    )

    pending_questions[sent.message_id] = {
        "chat_id": chat_id,
        "question_text": text
    }

    bot.send_message(chat_id, "‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –°–ø–∞—Å–∏–±–æ! –ú—ã —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º.")
    show_main_menu(chat_id)

@bot.callback_query_handler(func=lambda call: call.data == "courses")
def handle_courses_callback(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–æ–±—Ä–∞—Ç—å –∫—É—Ä—Å'"""
    start_course_survey(call.from_user.id)

@bot.message_handler(func=lambda message: message.reply_to_message is not None and message.chat.id == SUPPORT_CHAT_ID)
def handle_support_response(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    reply_to = message.reply_to_message

    if reply_to and reply_to.message_id in pending_questions:
        user_data = pending_questions[reply_to.message_id]
        user_chat_id = user_data["chat_id"]
        original_question = user_data["question_text"]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(
            user_chat_id,
            f"üîî –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n<b>{message.text}</b>\n\n"
            f"–ù–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n<b>{original_question}</b>",
            parse_mode="HTML"
        )

        show_main_menu(user_chat_id)

        bot.send_message(SUPPORT_CHAT_ID, "‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        pending_questions.pop(reply_to.message_id, None)
    else:
        bot.send_message(SUPPORT_CHAT_ID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")

@bot.message_handler(func=lambda message: user_typing_teacher_name.get(message.chat.id))
def handle_teacher_name_input(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    chat_id = message.chat.id
    full_name = message.text.strip()

    if not full_name:
        bot.send_message(chat_id, "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è.")
        return

    user_selected_teacher_for_rating[chat_id] = full_name
    user_typing_teacher_name.pop(chat_id, None)

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton(text="‚≠ê 1", callback_data="rating_teacher_1"),
        types.InlineKeyboardButton(text="‚≠ê 2", callback_data="rating_teacher_2"),
        types.InlineKeyboardButton(text="‚≠ê 3", callback_data="rating_teacher_3"),
        types.InlineKeyboardButton(text="‚≠ê 4", callback_data="rating_teacher_4"),
        types.InlineKeyboardButton(text="‚≠ê 5", callback_data="rating_teacher_5")
    )
    keyboard.add(types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))

    bot.send_message(
        chat_id,
        f"–¢–µ–ø–µ—Ä—å –ø–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é:\n<b>{full_name}</b>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if message.text.lower() == "–ø—Ä–∏–≤–µ—Ç":
        user = message.from_user
        save_user(user.id, user.username, f"{user.first_name} {user.last_name or ''}")
        bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –£—á—ë–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –æ–±—É—á–µ–Ω–∏–µ–º.")
        show_main_menu(message.from_user.id)
    elif message.text == "/help":
        bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à–∏ –ü—Ä–∏–≤–µ—Ç")
    else:
        bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –£—á—ë–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –æ–±—É—á–µ–Ω–∏–µ–º.")
        show_main_menu(message.from_user.id)

@bot.callback_query_handler(func=lambda call: call.data == 'none')
def handle_none(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—É—Å—Ç—ã–µ callback'–∏"""
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('recommended_'))
def handle_recommended_navigation(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–º –∫—É—Ä—Å–∞–º"""
    user_id = call.from_user.id
    if user_id not in user_course_positions['recommended']:
        bot.answer_callback_query(call.id)
        return

    action = call.data.split('_')[1]
    current_state = user_course_positions['recommended'][user_id]

    if action == 'back':
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
        state = {
            'answers': current_state.get('saved_answers', {}),
            'current_question': current_state.get('saved_question', 0),
            'message_id': call.message.message_id
        }
        user_survey_state[user_id] = state

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–ø—Ä–æ—Å—É
        ask_survey_question(user_id)
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫—É—Ä—Å–∞–º
        current_pos = current_state['position']
        total = len(current_state['courses'])

        if action == 'prev':
            new_pos = (current_pos - 1) % total
        elif action == 'next':
            new_pos = (current_pos + 1) % total
        else:
            bot.answer_callback_query(call.id)
            return

        show_recommended_course(user_id, new_pos, call.message.message_id)

    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    logger.info(f"Received callback: {call.data}")

    if call.data == "main_menu":
        show_main_menu(chat_id, user_menu_messages.get(chat_id))

    elif call.data == "questions":
        show_faq_topics(chat_id, message_id)

    elif call.data.startswith("faq_answer_"):
        parts = call.data.split('_')
        topic = parts[2]
        question_index = int(parts[3])
        show_faq_answer(chat_id, topic, question_index, message_id)

    elif call.data == "courses":
        start_course_survey(chat_id)

    elif call.data == "survey_back":
        state = user_survey_state.get(chat_id)
        if state and state['current_question'] > 0:
            state['current_question'] -= 1
            prev_question_key = survey_questions[state['current_question']]['key']

            if prev_question_key in state['answers']:
                del state['answers'][prev_question_key]

            ask_survey_question(chat_id)

    elif call.data == "survey_main_menu":
        if chat_id in user_survey_state:
            try:
                bot.delete_message(chat_id, user_survey_state[chat_id]['message_id'])
            except:
                pass

            del user_survey_state[chat_id]
        show_main_menu(chat_id)

    elif call.data.startswith("survey_"):
        parts = call.data.split('_')
        if len(parts) >= 3 and parts[0] == "survey":
            try:
                question_index = int(parts[1])
                answer = '_'.join(parts[2:]).replace('_', ' ')
                process_survey_answer(chat_id, question_index, answer)
            except ValueError:
                pass

    elif call.data == "catalog":
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton('–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è', callback_data='direction'),
            types.InlineKeyboardButton('–î–æ–ª–∂–Ω–æ—Å—Ç—å', callback_data='post'),
            types.InlineKeyboardButton('–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å', callback_data='availability'),
            types.InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')
        )

        try:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ –∫–∞–∫–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:",
                reply_markup=keyboard
            )
        except:
            bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ –∫–∞–∫–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:", reply_markup=keyboard)

    elif call.data == "availability":
        show_availability_menu(chat_id, message_id)
        
    elif call.data == "direction":
        keyboard = types.InlineKeyboardMarkup()
        key_finance = types.InlineKeyboardButton(text='–§–∏–Ω–∞–Ω—Å—ã', callback_data='finance')
        key_management = types.InlineKeyboardButton(text='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', callback_data='management')
        key_pedagogy = types.InlineKeyboardButton(text='–ü–µ–¥–∞–≥–æ–≥–∏–∫–∞', callback_data='pedagogy')
        key_back = types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='catalog')
        key_main = types.InlineKeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')

        keyboard.add(key_finance)
        keyboard.add(key_management)
        keyboard.add(key_pedagogy)
        keyboard.add(key_back)
        keyboard.add(key_main)

        try:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text="–ö–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                reply_markup=keyboard
            )
        except:
            bot.send_message(chat_id, "–ö–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=keyboard)

    elif call.data == "post":
        keyboard = types.InlineKeyboardMarkup()
        key_pps = types.InlineKeyboardButton(text='–ü–ü–°', callback_data='pps')
        key_aup = types.InlineKeyboardButton(text='–ê–£–ü', callback_data='aup')
        key_guide = types.InlineKeyboardButton(text='–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ', callback_data='guide')
        key_students = types.InlineKeyboardButton(text='–°—Ç—É–¥–µ–Ω—Ç—ã', callback_data='students')
        key_back = types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='catalog')
        key_main = types.InlineKeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')

        keyboard.add(key_pps)
        keyboard.add(key_aup)
        keyboard.add(key_guide)
        keyboard.add(key_students)
        keyboard.add(key_back)
        keyboard.add(key_main)

        try:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text="–ö–∞–∫–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                reply_markup=keyboard
            )
        except:
            bot.send_message(chat_id, "–ö–∞–∫–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=keyboard)

    elif call.data == "availability":
        keyboard = types.InlineKeyboardMarkup()
        key_open_programs = types.InlineKeyboardButton(text='–û—Ç–∫—Ä—ã—Ç—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã', callback_data='open')
        key_limited_programs = types.InlineKeyboardButton(text='–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã', callback_data='limited')
        key_back = types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='catalog')
        key_main = types.InlineKeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')

        keyboard.add(key_open_programs)
        keyboard.add(key_limited_programs)
        keyboard.add(key_back)
        keyboard.add(key_main)

        try:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text="–ü—Ä–æ–≥—Ä–∞–º–º—ã –∫–∞–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?",
                reply_markup=keyboard
            )
        except:
            bot.send_message(chat_id, "–ü—Ä–æ–≥—Ä–∞–º–º—ã –∫–∞–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?", reply_markup=keyboard)

    elif call.data in ['finance', 'management', 'pedagogy', 'pps', 'aup', 'guide', 'students', 'open', 'limited']:
        show_course(chat_id, call.data, edit_message_id=message_id)

    elif call.data == "feedback":
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text="‚úçÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤", callback_data="contact_information"))
        keyboard.add(types.InlineKeyboardButton(text="‚≠ê –û—Ü–µ–Ω–∏—Ç—å –∫—É—Ä—Å—ã –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π", callback_data="rate"))
        keyboard.add(types.InlineKeyboardButton(text="‚úçÔ∏è –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question"))
        keyboard.add(types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
        
        try:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text="–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫—É—Ä–∞—Ç–æ—Ä–∞–º–∏ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:",
                reply_markup=keyboard
            )
        except:
            bot.send_message(chat_id, "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫—É—Ä–∞—Ç–æ—Ä–∞–º–∏ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:", reply_markup=keyboard)

    elif call.data == "ask_question":
        users_waiting_for_question[chat_id] = True
        bot.send_message(chat_id, "‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ!")

    elif call.data == "rate":
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text="üìö –û—Ü–µ–Ω–∏—Ç—å –∫—É—Ä—Å", callback_data="rate_course"))
        keyboard.add(types.InlineKeyboardButton(text="üéì –û—Ü–µ–Ω–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", callback_data="rate_teacher"))
        keyboard.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="feedback"))
        keyboard.add(types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))

        try:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text="–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å?",
                reply_markup=keyboard
            )
        except:
            bot.send_message(chat_id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å?", reply_markup=keyboard)

    elif call.data == "rate_course":
        all_courses = get_all_courses()
        keyboard = types.InlineKeyboardMarkup()

        for idx, course in enumerate(all_courses[:10]):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∫–∞–∑ –ø–µ—Ä–≤—ã–º–∏ 10 –∫—É—Ä—Å–∞–º–∏
            keyboard.add(types.InlineKeyboardButton(text=course[0], callback_data=f"select_course_{idx}"))

        keyboard.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="rate"))
        keyboard.add(types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))

        try:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è –æ—Ü–µ–Ω–∫–∏:",
                reply_markup=keyboard
            )
        except:
            bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è –æ—Ü–µ–Ω–∫–∏:", reply_markup=keyboard)

    elif call.data.startswith("select_course_"):
        course_idx = int(call.data.split("_")[2])
        all_courses = get_all_courses()
        selected_course = all_courses[course_idx]
        user_selected_course_for_rating[chat_id] = selected_course[0]

        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton(text="‚≠ê 1", callback_data="rating_course_1"),
            types.InlineKeyboardButton(text="‚≠ê 2", callback_data="rating_course_2"),
            types.InlineKeyboardButton(text="‚≠ê 3", callback_data="rating_course_3"),
            types.InlineKeyboardButton(text="‚≠ê 4", callback_data="rating_course_4"),
            types.InlineKeyboardButton(text="‚≠ê 5", callback_data="rating_course_5")
        )
        keyboard.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="rate_course"))
        keyboard.add(types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))

        try:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫—É—Ä—Å:\n<b>{selected_course[0]}</b>\n\n–¢–µ–ø–µ—Ä—å –ø–æ—Å—Ç–∞–≤—å—Ç–µ –µ–º—É –æ—Ü–µ–Ω–∫—É:",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        except:
            bot.send_message(
                chat_id,
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫—É—Ä—Å:\n<b>{selected_course[0]}</b>\n\n–¢–µ–ø–µ—Ä—å –ø–æ—Å—Ç–∞–≤—å—Ç–µ –µ–º—É –æ—Ü–µ–Ω–∫—É:",
                reply_markup=keyboard,
                parse_mode="HTML"
            )

    elif call.data.startswith("rating_course_"):
        rating = int(call.data.split("_")[2])
        course_title = user_selected_course_for_rating.get(chat_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫—É—Ä—Å")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        save_rating(chat_id, 'course', course_title, rating)

        bot.send_message(chat_id, "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!")
        user_selected_course_for_rating.pop(chat_id, None)
        show_main_menu(chat_id)

    elif call.data == "rate_teacher":
        user_typing_teacher_name[chat_id] = True
        bot.send_message(chat_id, "‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å:")

    elif call.data.startswith("rating_teacher_"):
        rating = int(call.data.split("_")[2])
        full_name = user_selected_teacher_for_rating.get(chat_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        save_rating(chat_id, 'teacher', full_name, rating)

        bot.send_message(chat_id, "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!")
        user_selected_teacher_for_rating.pop(chat_id, None)
        show_main_menu(chat_id)

    elif call.data == "contact_information":
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text="üìû –ö—É—Ä–∞—Ç–æ—Ä –ü–æ–ª–∏–Ω–∞", url="https://t.me/polina_morik"))
        keyboard.add(types.InlineKeyboardButton(text="üìû –ö—É—Ä–∞—Ç–æ—Ä –í–∏–∫—Ç–æ—Ä–∏—è", url="https://t.me/vikkaaa1"))
        keyboard.add(types.InlineKeyboardButton(text="üìû –ö—É—Ä–∞—Ç–æ—Ä –ê–Ω–∞—Å—Ç–∞—Å–∏—è", url="https://t.me/nestty2"))
        keyboard.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="feedback"))
        keyboard.add(types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))

        try:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text="–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤:",
                reply_markup=keyboard
            )
        except:
            bot.send_message(chat_id, "–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤:", reply_markup=keyboard)

    elif call.data in ['course_prev', 'course_next']:
        user_id = call.from_user.id
        state = user_course_positions['regular'].get(user_id)

        if not state or not state.get('courses'):
            bot.answer_callback_query(call.id, "üåÄ –û–±–Ω–æ–≤–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä")
            return

        try:
            current_index = state['position']
            total = len(state['courses'])

            new_index = current_index - 1 if call.data == 'course_prev' else current_index + 1
            new_index %= total  # –¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è

            user_course_positions['regular'][user_id]['position'] = new_index

            show_course(
                user_id=user_id,
                course_type=state['filter_value'],
                course_index=new_index,
                edit_message_id=call.message.message_id
            )
            bot.answer_callback_query(call.id)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {e}")
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

    bot.answer_callback_query(call.id)

if __name__ == '__main__':
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")